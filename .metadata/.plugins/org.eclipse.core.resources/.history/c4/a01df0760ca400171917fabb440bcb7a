


#include <Servo.h>
#include <FreeRTOS_AVR.h>


const uint8_t TRIG_PIN = 9;
const uint8_t ECHO_PIN = 8;
const uint8_t redpin = 12; 
const uint8_t bluepin = 10; 
const uint8_t greenpin = 11;
Servo myservo2;
Servo myservo3;
Servo myservo4;
Servo myservo5;


SemaphoreHandle_t sem;


static void Thread1(void *arg){ 
   Serial.println("exe1");
   
  xSemaphoreTake(sem,portMAX_DELAY);  
  
  Serial.println("exe2");
 
}




static void Thread2(void *arg){
 

    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    pinMode(redpin, OUTPUT);
    pinMode(bluepin, OUTPUT);
    pinMode(greenpin, OUTPUT);  
    
  while(1){

   
      Serial.print("cm :"); 
      

    long duration, distance;
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    duration = pulseIn(ECHO_PIN, HIGH);
    distance = (duration/2) / 29.1;
    Serial.println(distance);

      

      if (distance <= 10){
        analogWrite(redpin, 255); 
        analogWrite(bluepin, 0); 
        analogWrite(greenpin, 0); 
        delay(100);

        }
        else { 
              analogWrite(redpin, 0);
              }
  
    vTaskDelay(2000);
       Serial.println("semaphoregive01");
    xSemaphoreGive(sem);
    Serial.println("semaphoregive02");// vTaskDelay(2000);
  }
}

void setup(){



Serial.begin(9600); 

Serial.println("test");

  portBASE_TYPE s1,s2;
  sem = xSemaphoreCreateCounting(1,0);
  s1 = xTaskCreate(Thread1,NULL,configMINIMAL_STACK_SIZE,NULL,2,NULL);
  s2 = xTaskCreate(Thread2,NULL,configMINIMAL_STACK_SIZE,NULL,1,NULL);
  Serial.println("checked");  
   
    if (sem== NULL || s1 != pdPASS || s2 != pdPASS ) {  
    Serial.println("Creation problem");  
//    while(1);  
  } 

   
  vTaskStartScheduler();
 
     
  while(1){}  
}




void loop(){Serial.println("Creation problem02");  }


  

 

